package server

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"github.com/ubntc/go/games/distris/api/command"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:        "github.com/ubntc/go/games/distris/server/Game",
		Iface:       reflect.TypeOf((*Game)(nil)).Elem(),
		New:         func() any { return &game{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return game_local_stub{impl: impl.(Game), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return game_client_stub{stub: stub, togglePauseMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ubntc/go/games/distris/server/Game", Method: "TogglePause"}), playMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ubntc/go/games/distris/server/Game", Method: "Play"}), getMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ubntc/go/games/distris/server/Game", Method: "Get"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return game_server_stub{impl: impl.(Game), addLoad: addLoad}
		},
	})
	codegen.Register(codegen.Registration{
		Name:        "github.com/ubntc/go/games/distris/server/Router",
		Iface:       reflect.TypeOf((*Router)(nil)).Elem(),
		New:         func() any { return &router{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return router_local_stub{impl: impl.(Router), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return router_client_stub{stub: stub, sendMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ubntc/go/games/distris/server/Router", Method: "Send"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return router_server_stub{impl: impl.(Router), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type game_local_stub struct {
	impl   Game
	tracer trace.Tracer
}

func (s game_local_stub) TogglePause(ctx context.Context) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "server.Game.TogglePause", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.TogglePause(ctx)
}

func (s game_local_stub) Play(ctx context.Context) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "server.Game.Play", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Play(ctx)
}

func (s game_local_stub) Get(ctx context.Context) (r0 *GameState, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "server.Game.Get", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Get(ctx)
}

type router_local_stub struct {
	impl   Router
	tracer trace.Tracer
}

func (s router_local_stub) Send(ctx context.Context, a0 command.Command) (r0 CommandStatus, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "server.Router.Send", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Send(ctx, a0)
}

// Client stub implementations.

type game_client_stub struct {
	stub               codegen.Stub
	togglePauseMetrics *codegen.MethodMetrics
	playMetrics        *codegen.MethodMetrics
	getMetrics         *codegen.MethodMetrics
}

func (s game_client_stub) TogglePause(ctx context.Context) (err error) {
	// Update metrics.
	start := time.Now()
	s.togglePauseMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "server.Game.TogglePause", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.togglePauseMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.togglePauseMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.togglePauseMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 2, nil, shardKey)
	if err != nil {
		return
	}
	s.togglePauseMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s game_client_stub) Play(ctx context.Context) (err error) {
	// Update metrics.
	start := time.Now()
	s.playMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "server.Game.Play", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.playMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.playMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.playMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 1, nil, shardKey)
	if err != nil {
		return
	}
	s.playMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s game_client_stub) Get(ctx context.Context) (r0 *GameState, err error) {
	// Update metrics.
	start := time.Now()
	s.getMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "server.Game.Get", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.getMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	if err != nil {
		return
	}
	s.getMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_GameState_653cb54b(dec)
	err = dec.Error()
	return
}

type router_client_stub struct {
	stub        codegen.Stub
	sendMetrics *codegen.MethodMetrics
}

func (s router_client_stub) Send(ctx context.Context, a0 command.Command) (r0 CommandStatus, err error) {
	// Update metrics.
	start := time.Now()
	s.sendMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "server.Router.Send", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.sendMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.sendMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.String((string)(a0))
	var shardKey uint64

	// Call the remote method.
	s.sendMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.sendMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	*(*string)(&r0) = dec.String()
	err = dec.Error()
	return
}

// Server stub implementations.

type game_server_stub struct {
	impl    Game
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s game_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "TogglePause":
		return s.togglePause
	case "Play":
		return s.play
	case "Get":
		return s.get
	default:
		return nil
	}
}

func (s game_server_stub) togglePause(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.TogglePause(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s game_server_stub) play(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Play(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s game_server_stub) get(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Get(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_GameState_653cb54b(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type router_server_stub struct {
	impl    Router
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s router_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Send":
		return s.send
	default:
		return nil
	}
}

func (s router_server_stub) send(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 command.Command
	*(*string)(&a0) = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Send(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String((string)(r0))
	enc.Error(appErr)
	return enc.Data(), nil
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_GameState_653cb54b(enc *codegen.Encoder, arg *GameState) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.EncodeBinaryMarshaler(arg)
	}
}

func serviceweaver_dec_ptr_GameState_653cb54b(dec *codegen.Decoder) *GameState {
	if !dec.Bool() {
		return nil
	}
	var res GameState
	dec.DecodeBinaryUnmarshaler(&res)
	return &res
}
